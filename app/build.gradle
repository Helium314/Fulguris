apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions'
// Firebase
// Google Services Gradle plugin
apply plugin: 'com.google.gms.google-services'
// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'
// parcelize for AbpEntity
apply plugin: 'kotlin-parcelize'

// TODO: Find a way to put it the variant/type folder such as: generated/source/locale/slionsFullDownload/debug/acr/browser/lightning/locale
def generatedLocaleListDir = layout.buildDirectory.dir('generated/source/locale/acr/browser/lightning/locale')

android {
    compileSdkVersion project.targetSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
    }

    dexOptions {
        javaMaxHeapSize "8g"
        preDexLibraries true
    }

    sourceSets {
        main {
            java {
                srcDirs += generatedLocaleListDir
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            // See: https://github.com/Slion/Fulguris/issues/116
            // If we disable minify then we need multi DEX.
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-project.txt'
            testCoverageEnabled true
            applicationIdSuffix ".debug"
        }

        release {
            debuggable false
            multiDexEnabled false
            // If you disable minify you need to make sure multi DEX library is loaded in release or you will get crashed on Android 5 devices and below
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-project.txt'
            testCoverageEnabled false
            // Use debug signing for now
            //signingConfig debug.signingConfig

            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a", "armeabi", "mips"
            }
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                // This option needs to be included for robolectric tests
                includeNoLocationClasses = true
            }
        }
    }

    flavorDimensions "BRAND", "VERSION", "PUBLISHER"

    productFlavors {

        lightning {
            dimension "BRAND"
            applicationId "acr.browser.lightning"
            versionCode 101
            versionName "5.1.0"
        }

        slions {
            dimension "BRAND"
            applicationId "net.slions.fulguris"
            versionCode 130
            versionName "1.6.2"
            archivesBaseName = "Fulguris-v$versionName"
        }

        lite {
            dimension "VERSION"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"false\")"
            applicationIdSuffix ".lite"
        }

        full {
            dimension "VERSION"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"true\")"
            applicationIdSuffix ".full"
        }

        playstore {
            dimension "PUBLISHER"
            applicationIdSuffix ".playstore"
            buildConfigField "Sponsorship", "SPONSORSHIP", "Sponsorship.TIN"
        }

        download {
            dimension "PUBLISHER"
            applicationIdSuffix ".download"
            buildConfigField "Sponsorship", "SPONSORSHIP", "Sponsorship.BRONZE"
        }

        fdroid {
            dimension "PUBLISHER"
            applicationIdSuffix ".fdroid"
            buildConfigField "Sponsorship", "SPONSORSHIP", "Sponsorship.TIN"
        }

    }

    lintOptions {
        abortOnError true
    }

    packagingOptions {
        exclude '.readme'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        // That should give us both view and data binding
        dataBinding true
    }
}

jacoco {
    toolVersion = '0.7.9' // See http://www.eclemma.org/jacoco/
}

/*
dexcount {
    includeClasses = false
    includeFieldCount = false
    format = "tree"
    orderByMethodCount = true
    verbose = false
}
*/

dependencies {
    // Multi DEX is only needed in debug and on older devices from Android 5 and below.
    // If you disable minify in release mode you also need to load and install that library in release for those devices.
    // See [BrowserApp.attachBaseContext]
    // See: https://github.com/Slion/Fulguris/issues/116
    debugImplementation 'androidx.multidex:multidex:2.0.1'

    // test dependencies
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0', {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation 'org.robolectric:robolectric:4.4'

    // Jetpack AndroidX libraries
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.annotation:annotation:1.2.0"
    implementation "androidx.vectordrawable:vectordrawable-animated:1.1.0"
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.recyclerview:recyclerview:1.2.0"
    implementation "androidx.core:core-ktx:1.5.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.fragment:fragment-ktx:1.3.4"
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.webkit:webkit:1.4.0'
    // We had to use alpha release to be able to use edge-to-edge bottom sheet
    // In code we use reflection to access some bottom sheet private class, methods and fields
    // Whenever you update that library you will need to review those hacks, see adjustBottomSheet.
    // Also search the code for BottomSheetDialog::class
    implementation "com.google.android.material:material:1.4.0-beta01"

    // Play Store billing
    playstoreImplementation 'com.android.billingclient:billing:3.0.3'

    // html parsing for reading mode
    implementation 'org.jsoup:jsoup:1.13.1'

    // reading mode
    implementation 'net.dankito.readability4j:readability4j:1.0.3'

    // file reading
    final def mezzanineVersion = '1.1.1'
    implementation "com.anthonycr.mezzanine:mezzanine:$mezzanineVersion"
    kapt "com.anthonycr.mezzanine:mezzanine-compiler:$mezzanineVersion"

    // dependency injection
    final def daggerVersion = '2.35.1'
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    // view binding
    final def butterKnifeVersion = '10.2.1'
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    // permissions
    implementation 'com.anthonycr.grant:permissions:1.1.2'

    // proxy support
    implementation 'net.i2p.android:client:0.9.45'
    implementation 'net.i2p.android:helper:0.9.5'

    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'

    // tor proxy
    final def netCipherVersion = '2.0.0-alpha1'
    implementation "info.guardianproject.netcipher:netcipher:2.1.0"
    implementation "info.guardianproject.netcipher:netcipher-webkit:$netCipherVersion"

    // memory leak analysis
    final def leakCanaryVersion = '1.6.3'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // Firebase
    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    // Add the Firebase SDK for Crashlytics.
    implementation 'com.google.firebase:firebase-crashlytics:18.0.0'

    // Volley HTTP request
    implementation 'com.android.volley:volley:1.2.0'

    // Since java.time need API 26 we use that backport instead
    // See: https://github.com/JakeWharton/ThreeTenABP
    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'

    implementation 'com.google.re2j:re2j:1.6'
}

kapt {
    arguments {
        arg("mezzanine.projectPath", project.rootDir)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        kotlinOptions {
            freeCompilerArgs += ['-XXLanguage:+InlineClasses']
            freeCompilerArgs += ['-progressive']
        }
    }
}


// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Fulguris provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales.
// This code was taken from Mozilla Focus project:
// https://github.com/mozilla-mobile/focus-android
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-")
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdirs()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        project.logger.lifecycle(localeList.path)

        localeList.delete()
        localeList.createNewFile()
        localeList << "package acr.browser.lightning.locale;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

